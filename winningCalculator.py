import streamlit as st
import pandas as pd

def run_WinningCalculator():
    st.set_page_config(page_title="Win How Much?", page_icon="üí∞", layout="centered")

    # Title banner
    st.markdown(
        """
        <div class="title-banner">
            <h1>üí∞ Win How Much? üí∞</h1>
        </div>
        """,
        unsafe_allow_html=True,
    )

    # Input fields
    col1, col2 = st.columns(2)
    with col1:
        big_bet = st.number_input("üíµ Big Bet", min_value=0, value=0, step=1)
    with col2:
        small_bet = st.number_input("üíµ Small Bet", min_value=0, value=0, step=1)

    # Prize structure
    prizes = {
        "First": {"Big Prize": 2000, "Small Prize": 3000},
        "Second": {"Big Prize": 1000, "Small Prize": 2000},
        "Third": {"Big Prize": 490, "Small Prize": 800},
        "Starter": {"Big Prize": 250, "Small Prize": None},
        "Consolation": {"Big Prize": 60, "Small Prize": None},
    }

    # Build result table
    rows = []
    for category, prize in prizes.items():
        big_prize = prize["Big Prize"]
        small_prize = prize["Small Prize"]

        big_actual = big_bet * big_prize if big_prize else 0
        small_actual = small_bet * small_prize if small_prize else 0
        row_total = big_actual + small_actual

        rows.append({
            "Category": category,
            "Total": f"<span style='font-weight:bold; color:green;'>${row_total:,}</span>"
                      if row_total > 0 else f"${row_total:,}",
            "Big Prize": f"${big_prize:,}" if big_prize else "‚Ä¢",
            "Big Bet": f"${big_bet:,}",
            "Big Actual": f"${big_actual:,}",
            "Small Prize": f"${small_prize:,}" if small_prize else "‚Ä¢",
            "Small Bet": f"${small_bet:,}",
            "Small Actual": f"${small_actual:,}",
        })

    df = pd.DataFrame(rows)

    # Remove the left numbering column
    df = df.reset_index(drop=True)

    # Wrap table in scrollable div
    st.markdown(
        f"""
        <div class="responsive-table">
            {df.to_html(escape=False, index=False)}
        </div>
        """,
        unsafe_allow_html=True,
    )
    show_4d_bet_types()

def show_4d_bet_types():
    entries = [
        ("1Ô∏è‚É£ Ordinary Entry", "Bet on a specific 4-digit number.", "Ex: **1234**"),
        ("2Ô∏è‚É£ 4-D Roll", "Replace one digit with **'R'** (0‚Äì9).", "Ex: **R234** ‚Üí `0234, 1234, ..., 9234`"),
        ("3Ô∏è‚É£ System Entry", "Bet on all permutations of a number.", "Ex: **1234** ‚Üí 24 perms"),
        ("4Ô∏è‚É£ iBet", "System Entry from $1 regardless of perms.", "Ex: iBet **1234** covers 24 perms"),
        ("5Ô∏è‚É£ Quickpick", "Random number generated by system.", "Ex: **5821**"),
    ]

    for t, d, e in entries:
        st.markdown(f"**{t}**\n{d}\n{e}\n")

    st.caption("üí° Tip: Mix bet types depending on your risk and payout style.")
